{"version":3,"sources":["App.js","registerServiceWorker.js","index.js"],"names":["App","configuration","useState","manager","setManager","error","setError","useEffect","FlexWebChat","create","then","console","log","channel","store","getState","flex","chat","channels","channelsArray","Object","values","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","ReactDOM","render","appConfig","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"gUAwCeA,EArCH,SAAH,GAA2B,IAArBC,EAAa,EAAbA,cACb,EAA8BC,mBAAS,MAAK,mBAArCC,EAAO,KAAEC,EAAU,KAC1B,EAA0BF,mBAAS,MAAK,mBAAjCG,EAAK,KAAEC,EAAQ,KAoBtB,OAlBAC,qBAAU,WACRC,UAAoBC,OAAOR,GACxBS,MAAK,SAAAP,GAEJQ,QAAQC,IAAI,UAAWT,GACvB,IAAMU,EAAUV,EAAQW,MAAMC,WAAWC,KAAKC,KAAKC,SAC7CC,EAAgBC,OAAOC,OAAOR,GAGpCF,QAAQC,IAAI,UAAWO,GAEvBf,EAAWD,MAEZmB,OAAM,SAAAjB,GACLC,EAASD,QAEZ,CAACF,IAEAA,EAEA,kBAAC,kBAA2B,CAACA,QAASA,GACpC,kBAAC,gBAAyB,QAK5BE,GACFM,QAAQN,MAAM,qCAAsCA,GAG/C,OC3BHkB,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTpB,MAAK,SAAAwB,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfR,UAAUC,cAAcQ,WAK1B7B,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrBU,OAAM,SAAAjB,GACLM,QAAQN,MAAM,4CAA6CA,MCpEjEoC,IAASC,OACL,kBAAC,EAAG,CAACzC,cAAewB,OAAOkB,YAC3BC,SAASC,eAAe,SDOb,WACb,GAA6C,kBAAmBd,UAAW,CAGzE,GADkB,IAAIe,IAAIC,GAAwBtB,OAAOC,UAC3CsB,SAAWvB,OAAOC,SAASsB,OAIvC,OAGFvB,OAAOwB,iBAAiB,QAAQ,WAC9B,IAAMnB,EAAK,UAAMiB,GAAsB,6BAEnCxB,IAiDV,SAAiCO,GAE/BoB,MAAMpB,GACHpB,MAAK,SAAAyC,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7CxB,UAAUC,cAAcwB,MAAM9C,MAAK,SAAAwB,GACjCA,EAAauB,aAAa/C,MAAK,WAC7Be,OAAOC,SAASgC,eAKpB7B,EAAgBC,MAGnBR,OAAM,WACLX,QAAQC,IACN,oEArEA+C,CAAwB7B,GAIxBC,UAAUC,cAAcwB,MAAM9C,MAAK,WACjCC,QAAQC,IACN,gHAMJiB,EAAgBC,OChCxB8B,I","file":"static/js/main.ef5804cd.chunk.js","sourcesContent":["import * as FlexWebChat from '@twilio/flex-webchat-ui';\nimport React, { useEffect, useState } from 'react';\n\nconst App = ({ configuration }) => {\n  const [manager, setManager] = useState(null);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    FlexWebChat.Manager.create(configuration)\n      .then(manager => {\n        // get the first channel from the object\n        console.log('manager', manager);\n        const channel = manager.store.getState().flex.chat.channels;\n        const channelsArray = Object.values(channel);\n        \n\n        console.log('channel', channelsArray);\n\n        setManager(manager);\n      })\n      .catch(error => {\n        setError(error);\n      });\n  }, [manager]);\n\n  if (manager) {\n    return (\n      <FlexWebChat.ContextProvider manager={manager}>\n        <FlexWebChat.RootContainer />\n      </FlexWebChat.ContextProvider>\n    );\n  }\n\n  if (error) {\n    console.error('Failed to initialize Flex Web Chat', error);\n  }\n\n  return null;\n};\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/assets/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// Comment out following polyfills if you don't need IE11 support\nimport 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'regenerator-runtime/runtime';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(\n    <App configuration={window.appConfig} />,\n    document.getElementById(\"root\")\n);\n\nregisterServiceWorker();\n"],"sourceRoot":""}